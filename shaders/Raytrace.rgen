#version 460
#extension GL_GOOGLE_include_directive: enable
#extension GL_EXT_ray_tracing : require

#include "base_raytrace.glsl"

layout (set = 0, binding = 0) uniform _CameraData {
    CameraData c;
} camBuffer;

layout (set = 1, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout (rgba32f, set = 1, binding = 1) uniform image2D image;

layout (location = 0) rayPayloadEXT HitInfo payload;

void main()
{
    // gl_LaunchIDEXT is the index of the current pixel.
    // gl_LaunchSizeEXT is the size of the image provided in traceRayEXT vulkan command call.

    // Get UV coordinates, normalized to value 0-1
    const vec2 pixCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 uv = (pixCenter / vec2(gl_LaunchSizeEXT.xy));

    // Convert the UV-coordinates to -1 to 1 range to calculate direction
    const vec2 ndc = uv * 2.0 - 1.0;

    const vec3 rayOrigin = camBuffer.c.position;
    vec4 rayDirection = vec4(ndc.x, ndc.y, 1.0, 1.0) * camBuffer.c.invViewProj;
    rayDirection.xyz = rayDirection.xyz / rayDirection.w;
    rayDirection = normalize(rayDirection);

    uint rayFlags = gl_RayFlagsOpaqueEXT;
    float tMin = camBuffer.c.nearPlane;
    float tMax = camBuffer.c.farPlane;

    traceRayEXT(topLevelAS, // Acceleration Structure
    rayFlags, // Ray flags
    0xFF, // Culling Mask. ANDed with mask set in acceleration structure.
    0, // SBT Record offset
    0, // SBT Record stride
    0, // Miss Shader Index
    rayOrigin.xyz, // Ray origin
    tMin, // Min Ray hit distance
    rayDirection.xyz, // Ray direction
    tMax, // Max Ray hit distance
    0 // Payload location
    );

    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(payload.color, 1.0));
}
