#version 460
#extension GL_GOOGLE_include_directive: enable
#extension GL_ARB_shader_clock : enable
#extension GL_EXT_shader_non_constant_global_initializers: enable

#include "raytrace_types.glsl"

layout (set = 0, binding = 0) uniform _CameraData {
    CameraData c;
} camBuffer;

layout (set = 0, binding = 2) uniform accelerationStructureEXT _globalAccelStruct;
layout (rgba32f, set = 0, binding = 3) uniform image2D image;

layout (push_constant) uniform _GlobalData {
    GlobalData g;
} globalConstants;

layout (location = 0) rayPayloadEXT PathtracePayload _globalPayload;

#include "raytrace_utils.glsl"
#include "raytrace_sample.glsl"

void main()
{
    uint seed = getSeed(gl_LaunchIDEXT.x + gl_LaunchIDEXT.x * gl_LaunchIDEXT.y, uint(clockARB()));
    vec4 finalColor = vec4(0.0, 0.0, 0.0, 1.0);
    _globalPayload.seed = seed;
    for (uint i = 0; i < globalConstants.g.antiAliasSamples; i++)
    {
        finalColor.rgb += samplePixel(vec2(gl_LaunchIDEXT.xy),
        vec2(gl_LaunchSizeEXT.xy),
        globalConstants.g.maxBounces,
        camBuffer.c
        );
    }
    finalColor.rgb = finalColor.rgb / globalConstants.g.antiAliasSamples;

    // Accumulate color
    if (globalConstants.g.frameIndex > 0)
    {
        const float t = 1.0f / (globalConstants.g.frameIndex + 1);
        const vec3 oldColor = imageLoad(image, ivec2(gl_LaunchIDEXT.xy)).xyz;
        finalColor = vec4(mix(oldColor, finalColor.rgb, t), 1.0f);
    }
    imageStore(image, ivec2(gl_LaunchIDEXT.xy), finalColor);
}
