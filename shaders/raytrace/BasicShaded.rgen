#version 460
#extension GL_GOOGLE_include_directive: enable

#include "common/globals.glsl"
#define CURRENT_SHADING_TYPE  SHADING_TYPE_BASIC

layout (set = 0, binding = 0) uniform _CameraData {
    CameraData c;
} camBuffer;
layout (set = 0, binding = 1) uniform _WorldData {
    WorldData w;
} worldBuffer;

layout (set = 0, binding = 2) uniform accelerationStructureEXT _globalAccelStruct;
layout (rgba8, set = 0, binding = 3) uniform image2D image;

layout (push_constant) uniform _PushConstantData {
    PushConstantData p;
} pushConstants;

layout (location = 0) rayPayloadEXT PathtracePayload _globalPayload;

#include "common/pathtrace.glsl"

void main()
{
    vec4 pixelColor = vec4(0.0, 0.0, 0.0, 1.0);

    _globalPayload.seed = seed(gl_LaunchIDEXT.x + gl_LaunchIDEXT.x * gl_LaunchIDEXT.y, uint(pushConstants.p.frameIndex));

    for (uint i = 0; i < pushConstants.p.maxSamples; i++)
    {
        pixelColor.rgb += samplePixel(vec2(gl_LaunchIDEXT.xy),
        vec2(gl_LaunchSizeEXT.xy),
        camBuffer.c,
        worldBuffer.w,
        PathtraceParameters(pushConstants.p.maxDepth)
        );
    }
    pixelColor.rgb = pixelColor.rgb / pushConstants.p.maxSamples;

    // Accumulate color
    if (pushConstants.p.frameIndex > 0)
    {
        const float t = 1.0f / (pushConstants.p.frameIndex + 1);
        const vec3 oldColor = imageLoad(image, ivec2(gl_LaunchIDEXT.xy)).xyz;
        pixelColor = vec4(mix(oldColor, pixelColor.rgb, t), 1.0f);
    }
    imageStore(image, ivec2(gl_LaunchIDEXT.xy), pixelColor);
}
